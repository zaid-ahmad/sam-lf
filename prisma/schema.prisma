// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Branch {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  code String @unique
  name String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  email         String?   @unique
  emailVerified DateTime?
  branchCode    String    
  account       Account[]
  sessions      Session[]
  role          UserRole
  leadsCreated  Lead[]    @relation("CanvasserLeads")
  leadsAssigned Lead[]    @relation("SalesRepLeads")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Lead {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  branch          String        
  firstName       String
  lastName        String
  phone1          String
  phone2          String?
  email           String?
  address         String
  quadrant        Quadrant
  postalCode      String
  images          String[]
  addressNotes    String?
  appointmentDateTime String
  homeOwnerType   HomeOwnerType
  age             AgeRange
  concerns        String[]
  surrounding     String[]
  amount          Float?
  serviceNeeded   TypesOfServices[]
  status          LeadStatus?   @default(APPOINTMENT)
  reason          String?
  canvasser          User          @relation("CanvasserLeads", fields: [canvasserId], references: [id])
  canvasserId        String        @db.ObjectId
  salesRep           User?         @relation("SalesRepLeads", fields: [salesRepId], references: [id])
  salesRepId         String?       @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Timings {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  time            String
}

enum Quadrant {
  NW
  NE
  SW
  SE
}

enum UserRole {
  ADMIN
  CANVASSER
  SALES_REP
  CUSTOMER
}

enum LeadStatus {
  APPOINTMENT
  ASSIGNED
  DEAD
  DEMO
  SALE
}

enum TypesOfServices {
  REPAIRS
  GUTTERS
  LF
  CSR
  FI
}

enum HomeOwnerType {
  MR_SHO
  MRS_SHO
  BOTH_ATTEND
  ONE_LEG
}

enum AgeRange {
  THIRTY_TO_FORTY
  FORTY_TO_FIFTY
  FIFTY_TO_SIXTY
  SIXTY_TO_SEVENTY
  SEVENTY_PLUS
}
